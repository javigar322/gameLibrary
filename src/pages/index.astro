---
import GameCard from "@/components/GameCard.astro"
import { Card } from "@/components/ui/card"
import Layout from "@/layouts/Layout.astro"
import type { Game } from "@/types/game"

// URL de tu API
const API_URL = `${import.meta.env.PUBLIC_BASE_URL}/api/search/searchGames.json`

// Función para hacer fetch de juegos con distintos criterios
async function fetchGames(params: Record<string, any>) {
	const url = new URL(API_URL)
	const searchParams = new URLSearchParams(params)

	url.search = searchParams.toString()

	const response = await fetch(url.toString())
	if (!response.ok) {
		console.log(response)
		throw new Error(`Error fetching games: ${response.statusText}`)
	}

	const data: Game[] = await response.json()
	return data
}

// Función para obtener juegos únicos
async function getUniqueGames(
	params: Record<string, any>,
	existingIds: Set<number>,
	required: number
) {
	let uniqueGames: Game[] = []
	let limit = required * 3 // Fetch more than needed to ensure uniqueness

	while (uniqueGames.length < required) {
		const games = await fetchGames({ ...params, limit })
		for (const game of games) {
			if (!existingIds.has(game.AppID) && uniqueGames.length < required) {
				uniqueGames.push(game)
				existingIds.add(game.AppID)
			}
		}
		if (games.length < limit) break // No more games to fetch
	}

	return uniqueGames
}

// Conjunto para almacenar IDs únicos
const existingIds = new Set<number>()

// Cargar juegos por géneros y puntajes
const adventureGames = await getUniqueGames(
	{
		genre: "Adventure",
		sort: "Metacritic score",
		order: "desc",
	},
	existingIds,
	4
)

const indieGames = await getUniqueGames(
	{
		genre: "Indie",
		sort: "Metacritic score",
		order: "desc",
	},
	existingIds,
	4
)

const topRatedGames = await getUniqueGames(
	{
		sort: "Metacritic score",
		order: "desc",
	},
	existingIds,
	4
)

const communityFavorites = await getUniqueGames(
	{
		sort: "User score",
		order: "desc",
	},
	existingIds,
	4
)
---

<style>
	.h-full.overflow-y-scroll.scroll-smooth.p-\[24px\]::-webkit-scrollbar {
		display: none;
	}

	.h-full.overflow-y-scroll.scroll-smooth.p-\[24px\] {
		-ms-overflow-style: none; /* IE and Edge */
		scrollbar-width: none; /* Firefox */
	}
</style>

<Layout title="home">
	<Card className="h-full space-y-12 overflow-y-scroll  scroll-smooth p-[24px]">
		<section>
			<h2>Top Adventure Games</h2>
			<div class="mt-2 grid grid-cols-4 gap-4 p-4">
				{adventureGames.map((game: Game) => <GameCard game={game} />)}
			</div>
		</section>

		<section>
			<h2>Top Indie Games</h2>
			<div class="mt-2 grid grid-cols-4 gap-4 px-4">
				{indieGames.map((game: Game) => <GameCard game={game} />)}
			</div>
		</section>

		<section>
			<h2>Top Rated Games</h2>
			<div class="mt-2 grid grid-cols-4 gap-4 px-4">
				{topRatedGames.map((game: Game) => <GameCard game={game} />)}
			</div>
		</section>

		<section>
			<h2>Community Favorites</h2>
			<div class="mt-2 grid grid-cols-4 gap-4 space-y-6 px-4">
				{communityFavorites.map((game: Game) => <GameCard game={game} />)}
			</div>
		</section>
	</Card>
</Layout>
