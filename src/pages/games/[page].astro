---
import Layout from "@/layouts/Layout.astro"
import { Card } from "@/components/ui/card"
import type { Game } from "@/types/game"
import { Button } from "@/components/ui/button"
import { FilterGames } from "@/components/filterGames"

// URL de tu API
const API_URL = `${import.meta.env.PUBLIC_BASE_URL}/api/search/searchGames.json`

let { page } = Astro.params
if (isNaN(Number(page)) || Number(page) < 1) {
	return Astro.redirect("/games/1")
}
const pageSize = 8

// Obtener parámetros de búsqueda de la URL
const searchParams = new URLSearchParams(Astro.url.search)
const query = searchParams.get("query") || ""
const genre = searchParams.get("genre") || ""
const minMetacriticScore = searchParams.get("minMetacriticScore") || ""
const minUserScore = searchParams.get("minUserScore") || ""
const offset = (Number(page) - 1) * pageSize

// Función para hacer fetch de juegos con criterios de búsqueda
async function fetchGames() {
	const url = new URL(API_URL)
	const params = {
		query,
		genre,
		minMetacriticScore,
		minUserScore,
		offset: offset.toString(),
		limit: pageSize.toString(),
	}
	const searchParams = new URLSearchParams(params)
	url.search = searchParams.toString()

	const response = await fetch(url.toString())
	if (!response.ok) {
		console.error(`Error fetching games: ${response.statusText}`)
		return []
	}
	const data: Game[] = await response.json()
	return data
}

// Obtener los juegos basados en los parámetros de búsqueda
let games = await fetchGames()

// Convertir searchParams a string para reutilizar en los enlaces de paginación
const searchParamsString = searchParams.toString()
---

<Layout title="Búsqueda">
	<Card className="grid h-full w-full flex-1 border-0 md:border ">
		<div class="mt-4 flex flex-row justify-between px-4 text-2xl">
			<h1>Búsqueda de Juegos</h1>
			<FilterGames client:load />
		</div>
		<section
			class="grid grid-cols-2 gap-4 overflow-y-scroll px-3 py-3 md:grid-cols-4 md:overflow-hidden md:py-0"
		>
			{
				games.length > 0 ? (
					games.map((game: Game) => (
						<a href={`/store/${game.AppID}`} title={`Ir a la página de la tienda de ${game.Name}`}>
							<section>
								<img
									src={game["Header image"]}
									alt={`Imagen del juego ${game.Name}`}
									class="aspect-video h-full w-full rounded-md"
									width="889"
									height="500"
									loading="eager"
									transition:name={`imagen-juego ${game.AppID}`}
								/>
								<div class="mt-2 flex justify-between px-2">
									<h4 transition:name={`nombre-juego ${game.AppID}`} class="truncate">
										{game.Name}
									</h4>
									<p transition:name={`game-score ${game.AppID}`}>{game["Metacritic score"]}</p>
								</div>
								<p class="mb-2 mt-2 line-clamp-1 px-2 text-muted-foreground">{game["Genres"]}</p>
							</section>
						</a>
					))
				) : (
					<p>No se encontraron juegos que coincidan con los criterios de búsqueda.</p>
				)
			}
		</section>
		<div class="flex h-full w-full flex-row items-center">
			{
				Number(page) > 1 ? (
					<a
						class="ml-4 flex w-full justify-start"
						href={`/games/${Number(page) - 1}?${searchParamsString}`}
					>
						<Button>Anterior</Button>
					</a>
				) : null
			}
			{
				games.length === pageSize ? (
					<a
						class="mr-4 flex w-full justify-end"
						href={`/games/${Number(page) + 1}?${searchParamsString}`}
					>
						<Button>Siguiente</Button>
					</a>
				) : null
			}
		</div>
	</Card>
</Layout>
